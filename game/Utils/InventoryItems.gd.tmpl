extends Node

const plant_max_yields = {
	{{- range .items}}{{ if .maxYield}}
	"{{md5 .key}}": {{.maxYield}},
	{{- end}}{{end}}
}

const plant_growth_stages = {
	{{- range .items}}{{ if .growthStages}}
	"{{md5 .key}}": [
		{{ range $i, $s := .growthStages}}{{$s}}, {{end}}
	],
	{{- end}}{{end}}
}

const hash_to_id_map = {
	{{- range $i, $item := .items }}
	"{{md5 .key}}": {{$i}},
	{{- end }}
}

const id_to_hash_map = {
	{{- range $i, $item := .items }}
	{{$i}}: "{{md5 .key}}",
	{{- end }}
}

enum {
	{{- range $i, $item := .items }}
	{{upperSnake .key}} = {{$i}},
	{{- end }}
}

const name_to_enum_map = {
	{{- range $i, $item := .items }}
	"{{.key}}": {{$i}},
	{{- end }}
}


func get_label_from_int(id: int):
	for label in name_to_enum_map:
		if name_to_enum_map[label] == id:
			return label

	return null


func get_hash_from_int(id: int):
	return id_to_hash_map[id]


func get_int_from_hash(id: String):
	return hash_to_id_map[id]


func get_int_from_name(id: String):
	return name_to_enum_map[id]
	
	
#		public static InventoryItemType GetEnum(string id) {
#			return (InventoryItemType)GetIntFromHash(id);
#		}
#
#		public static InventoryItemType GetEnum(int id) {
#			return (InventoryItemType)id;
#		}
#
#		public static string GetHash(InventoryItemType type) {
#			return GetHashFromInt((int)type);
#		}
#	}
#
#}
